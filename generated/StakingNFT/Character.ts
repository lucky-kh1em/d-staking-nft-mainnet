// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Character__fightResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Character__getHeroResultValue0Struct extends ethereum.Tuple {
  get heroRating(): BigInt {
    return this[0].toBigInt();
  }

  get heroRarity(): BigInt {
    return this[1].toBigInt();
  }

  get heroName(): BigInt {
    return this[2].toBigInt();
  }

  get attack(): BigInt {
    return this[3].toBigInt();
  }

  get defense(): BigInt {
    return this[4].toBigInt();
  }

  get lucky(): BigInt {
    return this[5].toBigInt();
  }

  get energy(): BigInt {
    return this[6].toBigInt();
  }

  get tokenId(): BigInt {
    return this[7].toBigInt();
  }

  get level(): BigInt {
    return this[8].toBigInt();
  }

  get lastFightTime(): BigInt {
    return this[9].toBigInt();
  }
}

export class Character__getHeroByIdResultValue0Struct extends ethereum.Tuple {
  get heroRating(): BigInt {
    return this[0].toBigInt();
  }

  get heroRarity(): BigInt {
    return this[1].toBigInt();
  }

  get heroName(): BigInt {
    return this[2].toBigInt();
  }

  get attack(): BigInt {
    return this[3].toBigInt();
  }

  get defense(): BigInt {
    return this[4].toBigInt();
  }

  get lucky(): BigInt {
    return this[5].toBigInt();
  }

  get energy(): BigInt {
    return this[6].toBigInt();
  }

  get tokenId(): BigInt {
    return this[7].toBigInt();
  }

  get level(): BigInt {
    return this[8].toBigInt();
  }

  get lastFightTime(): BigInt {
    return this[9].toBigInt();
  }
}

export class Character__mintResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Character__tokenByIndexResultValue0Struct extends ethereum.Tuple {
  get heroRating(): BigInt {
    return this[0].toBigInt();
  }

  get heroRarity(): BigInt {
    return this[1].toBigInt();
  }

  get heroName(): BigInt {
    return this[2].toBigInt();
  }

  get attack(): BigInt {
    return this[3].toBigInt();
  }

  get defense(): BigInt {
    return this[4].toBigInt();
  }

  get lucky(): BigInt {
    return this[5].toBigInt();
  }

  get energy(): BigInt {
    return this[6].toBigInt();
  }

  get tokenId(): BigInt {
    return this[7].toBigInt();
  }

  get level(): BigInt {
    return this[8].toBigInt();
  }

  get lastFightTime(): BigInt {
    return this[9].toBigInt();
  }
}

export class Character__unlockLevelResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class Character extends ethereum.SmartContract {
  static bind(address: Address): Character {
    return new Character("Character", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  GAME_ADMIN(): Bytes {
    let result = super.call("GAME_ADMIN", "GAME_ADMIN():(bytes32)", []);

    return result[0].toBytes();
  }

  try_GAME_ADMIN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("GAME_ADMIN", "GAME_ADMIN():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fight(
    player: Address,
    heroId: BigInt,
    round: BigInt,
    seeds: Array<BigInt>
  ): Character__fightResult {
    let result = super.call(
      "fight",
      "fight(address,uint256,uint256,uint256[]):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(player),
        ethereum.Value.fromUnsignedBigInt(heroId),
        ethereum.Value.fromUnsignedBigInt(round),
        ethereum.Value.fromUnsignedBigIntArray(seeds)
      ]
    );

    return new Character__fightResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_fight(
    player: Address,
    heroId: BigInt,
    round: BigInt,
    seeds: Array<BigInt>
  ): ethereum.CallResult<Character__fightResult> {
    let result = super.tryCall(
      "fight",
      "fight(address,uint256,uint256,uint256[]):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(player),
        ethereum.Value.fromUnsignedBigInt(heroId),
        ethereum.Value.fromUnsignedBigInt(round),
        ethereum.Value.fromUnsignedBigIntArray(seeds)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Character__fightResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  gameWikiContract(): Address {
    let result = super.call(
      "gameWikiContract",
      "gameWikiContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_gameWikiContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gameWikiContract",
      "gameWikiContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHero(_heroId: BigInt): Character__getHeroResultValue0Struct {
    let result = super.call(
      "getHero",
      "getHero(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_heroId)]
    );

    return changetype<Character__getHeroResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getHero(
    _heroId: BigInt
  ): ethereum.CallResult<Character__getHeroResultValue0Struct> {
    let result = super.tryCall(
      "getHero",
      "getHero(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_heroId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Character__getHeroResultValue0Struct>(value[0].toTuple())
    );
  }

  getHeroById(heroId: BigInt): Character__getHeroByIdResultValue0Struct {
    let result = super.call(
      "getHeroById",
      "getHeroById(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(heroId)]
    );

    return changetype<Character__getHeroByIdResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getHeroById(
    heroId: BigInt
  ): ethereum.CallResult<Character__getHeroByIdResultValue0Struct> {
    let result = super.tryCall(
      "getHeroById",
      "getHeroById(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(heroId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Character__getHeroByIdResultValue0Struct>(value[0].toTuple())
    );
  }

  getLevel(_heroId: BigInt): BigInt {
    let result = super.call("getLevel", "getLevel(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_heroId)
    ]);

    return result[0].toBigInt();
  }

  try_getLevel(_heroId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLevel", "getLevel(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_heroId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwnedTokenIndex(tokenId: BigInt): BigInt {
    let result = super.call(
      "getOwnedTokenIndex",
      "getOwnedTokenIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getOwnedTokenIndex(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOwnedTokenIndex",
      "getOwnedTokenIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRarity(_heroId: BigInt): BigInt {
    let result = super.call("getRarity", "getRarity(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_heroId)
    ]);

    return result[0].toBigInt();
  }

  try_getRarity(_heroId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getRarity", "getRarity(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_heroId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRating(_heroId: BigInt): BigInt {
    let result = super.call("getRating", "getRating(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_heroId)
    ]);

    return result[0].toBigInt();
  }

  try_getRating(_heroId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getRating", "getRating(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_heroId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTokenIndex(tokenId: BigInt): BigInt {
    let result = super.call(
      "getTokenIndex",
      "getTokenIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getTokenIndex(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenIndex",
      "getTokenIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxRandomBonus(): BigInt {
    let result = super.call("maxRandomBonus", "maxRandomBonus():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxRandomBonus(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxRandomBonus",
      "maxRandomBonus():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  migrateBatch(
    externalNFTAddresses: Array<Address>,
    tokenIds: Array<BigInt>,
    nftNames: Array<BigInt>,
    rarities: Array<BigInt>,
    seeds: Array<BigInt>
  ): Array<BigInt> {
    let result = super.call(
      "migrateBatch",
      "migrateBatch(address[],uint256[],uint256[],uint256[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(externalNFTAddresses),
        ethereum.Value.fromUnsignedBigIntArray(tokenIds),
        ethereum.Value.fromUnsignedBigIntArray(nftNames),
        ethereum.Value.fromUnsignedBigIntArray(rarities),
        ethereum.Value.fromUnsignedBigIntArray(seeds)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_migrateBatch(
    externalNFTAddresses: Array<Address>,
    tokenIds: Array<BigInt>,
    nftNames: Array<BigInt>,
    rarities: Array<BigInt>,
    seeds: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "migrateBatch",
      "migrateBatch(address[],uint256[],uint256[],uint256[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(externalNFTAddresses),
        ethereum.Value.fromUnsignedBigIntArray(tokenIds),
        ethereum.Value.fromUnsignedBigIntArray(nftNames),
        ethereum.Value.fromUnsignedBigIntArray(rarities),
        ethereum.Value.fromUnsignedBigIntArray(seeds)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  minRandomBonus(): BigInt {
    let result = super.call("minRandomBonus", "minRandomBonus():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minRandomBonus(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minRandomBonus",
      "minRandomBonus():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(
    minter: Address,
    seed: BigInt,
    chestType: BigInt
  ): Character__mintResult {
    let result = super.call(
      "mint",
      "mint(address,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(seed),
        ethereum.Value.fromUnsignedBigInt(chestType)
      ]
    );

    return new Character__mintResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_mint(
    minter: Address,
    seed: BigInt,
    chestType: BigInt
  ): ethereum.CallResult<Character__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint(address,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(seed),
        ethereum.Value.fromUnsignedBigInt(chestType)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Character__mintResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  mintHeroPreSale(
    minter: Address,
    seed: BigInt,
    heroName: BigInt,
    heroRarity: BigInt
  ): BigInt {
    let result = super.call(
      "mintHeroPreSale",
      "mintHeroPreSale(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(seed),
        ethereum.Value.fromUnsignedBigInt(heroName),
        ethereum.Value.fromUnsignedBigInt(heroRarity)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintHeroPreSale(
    minter: Address,
    seed: BigInt,
    heroName: BigInt,
    heroRarity: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintHeroPreSale",
      "mintHeroPreSale(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(seed),
        ethereum.Value.fromUnsignedBigInt(heroName),
        ethereum.Value.fromUnsignedBigInt(heroRarity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextTokenId(): BigInt {
    let result = super.call("nextTokenId", "nextTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextTokenId", "nextTokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  timeToRegainEnergy(): BigInt {
    let result = super.call(
      "timeToRegainEnergy",
      "timeToRegainEnergy():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_timeToRegainEnergy(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeToRegainEnergy",
      "timeToRegainEnergy():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenByIndex(index: BigInt): Character__tokenByIndexResultValue0Struct {
    let result = super.call(
      "tokenByIndex",
      "tokenByIndex(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return changetype<Character__tokenByIndexResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_tokenByIndex(
    index: BigInt
  ): ethereum.CallResult<Character__tokenByIndexResultValue0Struct> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Character__tokenByIndexResultValue0Struct>(value[0].toTuple())
    );
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokensOfOwner(owner: Address): Array<BigInt> {
    let result = super.call(
      "tokensOfOwner",
      "tokensOfOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigIntArray();
  }

  try_tokensOfOwner(owner: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "tokensOfOwner",
      "tokensOfOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unlockLevel(
    player: Address,
    _heroId: BigInt,
    seed: BigInt
  ): Character__unlockLevelResult {
    let result = super.call(
      "unlockLevel",
      "unlockLevel(address,uint256,uint256):(uint256,bool)",
      [
        ethereum.Value.fromAddress(player),
        ethereum.Value.fromUnsignedBigInt(_heroId),
        ethereum.Value.fromUnsignedBigInt(seed)
      ]
    );

    return new Character__unlockLevelResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_unlockLevel(
    player: Address,
    _heroId: BigInt,
    seed: BigInt
  ): ethereum.CallResult<Character__unlockLevelResult> {
    let result = super.tryCall(
      "unlockLevel",
      "unlockLevel(address,uint256,uint256):(uint256,bool)",
      [
        ethereum.Value.fromAddress(player),
        ethereum.Value.fromUnsignedBigInt(_heroId),
        ethereum.Value.fromUnsignedBigInt(seed)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Character__unlockLevelResult(
        value[0].toBigInt(),
        value[1].toBoolean()
      )
    );
  }
}

export class AddExternalCharacterContractCall extends ethereum.Call {
  get inputs(): AddExternalCharacterContractCall__Inputs {
    return new AddExternalCharacterContractCall__Inputs(this);
  }

  get outputs(): AddExternalCharacterContractCall__Outputs {
    return new AddExternalCharacterContractCall__Outputs(this);
  }
}

export class AddExternalCharacterContractCall__Inputs {
  _call: AddExternalCharacterContractCall;

  constructor(call: AddExternalCharacterContractCall) {
    this._call = call;
  }

  get externalContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddExternalCharacterContractCall__Outputs {
  _call: AddExternalCharacterContractCall;

  constructor(call: AddExternalCharacterContractCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class FightCall extends ethereum.Call {
  get inputs(): FightCall__Inputs {
    return new FightCall__Inputs(this);
  }

  get outputs(): FightCall__Outputs {
    return new FightCall__Outputs(this);
  }
}

export class FightCall__Inputs {
  _call: FightCall;

  constructor(call: FightCall) {
    this._call = call;
  }

  get player(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get heroId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get seeds(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class FightCall__Outputs {
  _call: FightCall;

  constructor(call: FightCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _gameWiki(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MigrateBatchCall extends ethereum.Call {
  get inputs(): MigrateBatchCall__Inputs {
    return new MigrateBatchCall__Inputs(this);
  }

  get outputs(): MigrateBatchCall__Outputs {
    return new MigrateBatchCall__Outputs(this);
  }
}

export class MigrateBatchCall__Inputs {
  _call: MigrateBatchCall;

  constructor(call: MigrateBatchCall) {
    this._call = call;
  }

  get externalNFTAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get nftNames(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get rarities(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get seeds(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class MigrateBatchCall__Outputs {
  _call: MigrateBatchCall;

  constructor(call: MigrateBatchCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get seed(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get chestType(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class MintHeroPreSaleCall extends ethereum.Call {
  get inputs(): MintHeroPreSaleCall__Inputs {
    return new MintHeroPreSaleCall__Inputs(this);
  }

  get outputs(): MintHeroPreSaleCall__Outputs {
    return new MintHeroPreSaleCall__Outputs(this);
  }
}

export class MintHeroPreSaleCall__Inputs {
  _call: MintHeroPreSaleCall;

  constructor(call: MintHeroPreSaleCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get seed(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get heroName(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get heroRarity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintHeroPreSaleCall__Outputs {
  _call: MintHeroPreSaleCall;

  constructor(call: MintHeroPreSaleCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveExternalCharacterContractCall extends ethereum.Call {
  get inputs(): RemoveExternalCharacterContractCall__Inputs {
    return new RemoveExternalCharacterContractCall__Inputs(this);
  }

  get outputs(): RemoveExternalCharacterContractCall__Outputs {
    return new RemoveExternalCharacterContractCall__Outputs(this);
  }
}

export class RemoveExternalCharacterContractCall__Inputs {
  _call: RemoveExternalCharacterContractCall;

  constructor(call: RemoveExternalCharacterContractCall) {
    this._call = call;
  }

  get externalContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveExternalCharacterContractCall__Outputs {
  _call: RemoveExternalCharacterContractCall;

  constructor(call: RemoveExternalCharacterContractCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetGameAdminCall extends ethereum.Call {
  get inputs(): SetGameAdminCall__Inputs {
    return new SetGameAdminCall__Inputs(this);
  }

  get outputs(): SetGameAdminCall__Outputs {
    return new SetGameAdminCall__Outputs(this);
  }
}

export class SetGameAdminCall__Inputs {
  _call: SetGameAdminCall;

  constructor(call: SetGameAdminCall) {
    this._call = call;
  }

  get _gameAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGameAdminCall__Outputs {
  _call: SetGameAdminCall;

  constructor(call: SetGameAdminCall) {
    this._call = call;
  }
}

export class SetGameWikiContractCall extends ethereum.Call {
  get inputs(): SetGameWikiContractCall__Inputs {
    return new SetGameWikiContractCall__Inputs(this);
  }

  get outputs(): SetGameWikiContractCall__Outputs {
    return new SetGameWikiContractCall__Outputs(this);
  }
}

export class SetGameWikiContractCall__Inputs {
  _call: SetGameWikiContractCall;

  constructor(call: SetGameWikiContractCall) {
    this._call = call;
  }

  get _wiki(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGameWikiContractCall__Outputs {
  _call: SetGameWikiContractCall;

  constructor(call: SetGameWikiContractCall) {
    this._call = call;
  }
}

export class SetHeroNameCall extends ethereum.Call {
  get inputs(): SetHeroNameCall__Inputs {
    return new SetHeroNameCall__Inputs(this);
  }

  get outputs(): SetHeroNameCall__Outputs {
    return new SetHeroNameCall__Outputs(this);
  }
}

export class SetHeroNameCall__Inputs {
  _call: SetHeroNameCall;

  constructor(call: SetHeroNameCall) {
    this._call = call;
  }

  get heroId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetHeroNameCall__Outputs {
  _call: SetHeroNameCall;

  constructor(call: SetHeroNameCall) {
    this._call = call;
  }
}

export class SetRandomBonusCall extends ethereum.Call {
  get inputs(): SetRandomBonusCall__Inputs {
    return new SetRandomBonusCall__Inputs(this);
  }

  get outputs(): SetRandomBonusCall__Outputs {
    return new SetRandomBonusCall__Outputs(this);
  }
}

export class SetRandomBonusCall__Inputs {
  _call: SetRandomBonusCall;

  constructor(call: SetRandomBonusCall) {
    this._call = call;
  }

  get min(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get max(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRandomBonusCall__Outputs {
  _call: SetRandomBonusCall;

  constructor(call: SetRandomBonusCall) {
    this._call = call;
  }
}

export class SetTimeToRegainEnergyCall extends ethereum.Call {
  get inputs(): SetTimeToRegainEnergyCall__Inputs {
    return new SetTimeToRegainEnergyCall__Inputs(this);
  }

  get outputs(): SetTimeToRegainEnergyCall__Outputs {
    return new SetTimeToRegainEnergyCall__Outputs(this);
  }
}

export class SetTimeToRegainEnergyCall__Inputs {
  _call: SetTimeToRegainEnergyCall;

  constructor(call: SetTimeToRegainEnergyCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTimeToRegainEnergyCall__Outputs {
  _call: SetTimeToRegainEnergyCall;

  constructor(call: SetTimeToRegainEnergyCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnlockLevelCall extends ethereum.Call {
  get inputs(): UnlockLevelCall__Inputs {
    return new UnlockLevelCall__Inputs(this);
  }

  get outputs(): UnlockLevelCall__Outputs {
    return new UnlockLevelCall__Outputs(this);
  }
}

export class UnlockLevelCall__Inputs {
  _call: UnlockLevelCall;

  constructor(call: UnlockLevelCall) {
    this._call = call;
  }

  get player(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _heroId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get seed(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UnlockLevelCall__Outputs {
  _call: UnlockLevelCall;

  constructor(call: UnlockLevelCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): boolean {
    return this._call.outputValues[1].value.toBoolean();
  }
}

export class UpdateLevelCall extends ethereum.Call {
  get inputs(): UpdateLevelCall__Inputs {
    return new UpdateLevelCall__Inputs(this);
  }

  get outputs(): UpdateLevelCall__Outputs {
    return new UpdateLevelCall__Outputs(this);
  }
}

export class UpdateLevelCall__Inputs {
  _call: UpdateLevelCall;

  constructor(call: UpdateLevelCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get balance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class UpdateLevelCall__Outputs {
  _call: UpdateLevelCall;

  constructor(call: UpdateLevelCall) {
    this._call = call;
  }
}
